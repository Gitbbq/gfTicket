# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-12 15:57
from __future__ import unicode_literals

import uuid

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('BusinessSystem', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_created', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('db_modified', models.DateTimeField(auto_now=True, verbose_name='修改日期')),
                ('db_uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('db_manual_order', models.FloatField(default=0.0, verbose_name='顺位')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
            ],
            options={
                'verbose_name': '分类',
                'verbose_name_plural': '分类',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_created', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('db_modified', models.DateTimeField(auto_now=True, verbose_name='修改日期')),
                ('db_uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('db_manual_order', models.FloatField(default=0.0, verbose_name='顺位')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('content', models.TextField(verbose_name='正文')),
                ('content_less', models.TextField(blank=True, verbose_name='简单正文')),
                ('type', models.CharField(choices=[('blog', '博文'), ('page', '页面'), ('image', '图片')], default='blog', max_length=255, verbose_name='类型')),
                ('status', models.CharField(choices=[('published', '已发布'), ('draft', '草稿'), ('trash', '回收站')], default='published', max_length=255, verbose_name='状态')),
                ('comment_status', models.CharField(choices=[('yes', '可以评论'), ('no', '禁止评论')], default='yes', max_length=255, verbose_name='是否允许评论')),
                ('key_word', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('record', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={'record': []}, verbose_name='历史记录')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Document.Category', verbose_name='分类')),
                ('relevant_system', models.ManyToManyField(blank=True, related_name='relevant_doc', to='BusinessSystem.System', verbose_name='相关系统')),
            ],
            options={
                'verbose_name': '文章',
                'verbose_name_plural': '文章',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_created', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('db_modified', models.DateTimeField(auto_now=True, verbose_name='修改日期')),
                ('db_uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('db_manual_order', models.FloatField(default=0.0, verbose_name='顺位')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('count', models.IntegerField(default=0, editable=False)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tag',
            },
        ),
        migrations.AddField(
            model_name='entry',
            name='tag',
            field=models.ManyToManyField(blank=True, related_name='entries', to='Document.Tag', verbose_name='Tags'),
        ),
    ]
